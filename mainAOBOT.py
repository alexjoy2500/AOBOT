# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext

from BOT.TEST.config import TOKEN, TOKEN_OWM # –ò–º–ø–æ—Ä—Ç —Ç–æ–∫–µ–Ω–æ–≤ –ë–æ—Ç–∞ –∏ –ü–æ–≥–æ–¥—ã

# –†–∞–Ω–¥–æ–º
import random

# –ü–æ–≥–æ–¥–∞
from pyowm import OWM
from pyowm.utils.config import get_default_config

from BOT.AOSHELL import COIN as co, Keyboard as navi
from BOT.AOSHELL.classBOT import PogodaLife

import logging

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN, parse_mode='HTML') # TOKEN –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É –±–æ—Ç–∞ BotFather
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ü–æ–≥–æ–¥–Ω—ã–π –±–æ—Ç
config_dict = get_default_config()
config_dict['language'] = 'ru'

owm = OWM(TOKEN_OWM, config_dict) # –ü–æ–ª—É—á–µ–Ω–∏–µ –¢–æ–∫–µ–Ω–∞ –ü–æ–≥–æ–¥—ã
mgr = owm.weather_manager()

@dp.message_handler(commands=['start'])
async def hello(message: types.Message):
    await message.answer(
        '‚ò∫Ô∏è<b>–•–µ–π... –ü—Ä–∏–≤–µ—Ç, {0.first_name}!</b> \n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –º–æ–µ–≥–æ —É—á–µ–±–Ω–æ–≥–æ –±–æ—Ç–∞...'.format(
            message.from_user))
    await message.answer(
        '–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∫–∞ —É–º–µ–µ—Ç: '

        '\n\n1. –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã'
        '\n2. –í—ã–¥–∞–≤–∞—Ç—å —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ'
        '\n3. –í—ã–¥–∞–≤–∞—Ç—å –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç'
        '\n4. –í—ã–¥–∞–≤–∞—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã <i>(—Å–∫–æ—Ä–æ)</i>'
        '\n5. –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∞–π—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π <i>(—Å–∫–æ—Ä–æ)</i>'
    )  # <i>(—Å–∫–æ—Ä–æ)</i> - –¥–µ–ª–∞–µ—Ç —Å–ª–æ–≤–æ –∫—É—Ä—Å–∏—Ä–æ–º, <b>(—Å–∫–æ—Ä–æ)</b> - –¥–µ–ª–∞–µ—Ç —Å–ª–æ–≤–æ –∂–∏—Ä–Ω—ã–º.

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –°—Ç–∏–∫–µ—Ä–∞
    await bot.send_sticker(chat_id=message.from_user.id,
                           sticker=r"CAACAgIAAxkBAAEFdj9i61uIxC76WmGQ2SzberOQwqhyJAACuwADMNSdEYqvQODiIDzJKQQ",
                           reply_markup=navi.hello_kb)


@dp.message_handler(commands=['weather'])  # –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /weather
async def PogoLife_1(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:')
    await PogodaLife.weath.set()  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —é–∑–µ—Ä–∞


@dp.message_handler(state=PogodaLife.weath)
async def PogoLife_2(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    data = await state.get_data()  # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —é–∑–µ—Ä–æ–º

    fok = message.text  # –ü–µ—Ä–µ–¥–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã

    observation = mgr.weather_at_place(fok)
    w = observation.weather

    celsius = round(w.temperature('celsius')['temp'])
    celsius_max = round(w.temperature('celsius')['temp_max'])
    celsius_min = round(w.temperature('celsius')['temp_min'])

    status = w.detailed_status
    speed = w.wind()['speed']

    rm = f'–ì–æ—Ä–æ–¥: {fok}\n\n'

    rm += f'–°–µ–π—á–∞—Å –≤ –≥–æ—Ä–æ–¥–µ {celsius}¬∞C\n'
    rm += f'–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã: {status}\n\n'
    rm += f'–ú–∞–∫—Å. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {celsius_max}¬∞C\n' \
          f'–ú–∏–Ω. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {celsius_min}¬∞C\n'
    rm += f'–í–µ—Ç–µ—Ä: {speed} –º/—Å \n\n'

    if int(celsius) < 10 and int(celsius) == 0:
        rm += 'üò™–û–¥–µ–≤–∞–π—Å—è –ø–æ—Ç–µ–ø–ª–µ–µ, –∏–Ω–∞—á–µ –∑–∞–º–µ—Ä–∑–Ω–∏—à—å!'
    elif int(celsius) >= 10 and int(celsius) < 24:
        rm += 'üòå–£–∂–µ —Ç–µ–ø–ª–µ–µ, –æ–¥–µ–Ω—å—Å—è –Ω–µ–º–Ω–æ–≥–æ –ª–µ–≥—á–µ!'
    elif int(celsius) >= 24:
        rm += 'ü•µ–£—Ñ.. –ù–∞ —É–ª–∏—Ü–µ –∂–∞—Ä–∫–æ–≤–∞—Ç–æ, –æ–¥–µ–≤–∞–π—Å—è –ª–µ–≥–∫–æ!'
    elif int(celsius) < 0:
        rm += 'ü•∂–û—Ö—Ö.. –ö–∞–∫–∞—è —Ö–æ–ª–æ–¥—Ä—ã–≥–∞... –ë—ã—Å—Ç—Ä–æ –æ–¥–µ–ª—Å—è, –∞ —Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —è–π—Ü–∞ –æ—Ç–º–æ—Ä–æ–∑–∏—à—å!'

    await message.answer(rm)

    await state.finish()  # –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –º–∞—à–∏–Ω—É


@dp.message_handler()
async def get(message: types.Message):
    if message.text == '–ü–æ–≥–æ–¥–∞':
        await message.answer('–ù–∞–∂–º–∏—Ç–µ /weather')

    elif message.text == '–†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ':
        await message.answer(str(random.randint(1, 100)))

    elif message.text == '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É', reply_markup=navi.crupto_lss)

    else:
        await message.answer('–Ø –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è–ª—å')
        await bot.send_sticker(chat_id=message.from_user.id,
                               sticker=r"CAACAgIAAxkBAAEFeRFi7NowPCM1Bnr1ehZLbAtsDXQjzgAC0QADMNSdEfxR6nTYGt87KQQ")


@dp.callback_query_handler(text_contains = "cc_")
async def crupto(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    callback_data = call.data
    currency = str(callback_data[3:])  # –ü–æ–ª—É—á–∞—é –∫—Ä–∏–ø—Ç—É
    result = co.cg.get_price(ids=currency, vs_currencies='usd') # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é
    await bot.send_message(call.from_user.id, f'–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ <b>{currency}</b>\n–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç {result[currency]["usd"]}$',reply_markup=navi.crupto_lss)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
